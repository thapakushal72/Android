goo.FlatWaterRenderer=function(e,t,r,o,i,a,n,s,l,c,m,h){"use strict";function f(e){e=e||{},this.useRefraction=void 0!==e.useRefraction?e.useRefraction:!0,this.divider=e.divider||2,this.width=-1,this.height=-1,this.waterCamera=new r(45,1,.1,2e3),this.renderList=[],this.waterPlane=new o;var t=new s(d,"WaterMaterial");t.shader.setDefine("REFRACTION",this.useRefraction),t.cullState.enabled=!1;var i=null;if(e.normalsTexture)i=e.normalsTexture,t.setTexture("NORMAL_MAP",i);else if(e.normalsUrl){var m=e.normalsUrl||"../resources/water/waternormals3.png";(new c).loadTexture2D(m).then(function(e){t.setTexture("NORMAL_MAP",e)})}else{var h=new Uint8Array([127,127,255,255]);i=new l(h,null,1,1),t.setTexture("NORMAL_MAP",i)}this.waterMaterial=t,this.skybox=null,this.followCam=!0,this.updateWaterPlaneFromEntity=void 0!==e.updateWaterPlaneFromEntity?this.updateWaterPlaneFromEntity:!0,this.calcVect=new a,this.camReflectDir=new a,this.camReflectUp=new a,this.camReflectLeft=new a,this.camLocation=new a,this.camReflectPos=new a,this.offset=new a,this.clipPlane=new n,this.waterEntity=null,this.depthMaterial=new s(u,"depth")}f.prototype.updateSize=function(e){var t=Math.floor(e.viewportWidth/this.divider),r=Math.floor(e.viewportHeight/this.divider);(t!==this.width||r!==this.height)&&(this.width=t,this.height=r,this.reflectionTarget&&e._deallocateRenderTarget(this.reflectionTarget),this.reflectionTarget=new i(t,r),this.useRefraction&&(this.refractionTarget&&e._deallocateRenderTarget(this.refractionTarget),this.depthTarget&&e._deallocateRenderTarget(this.depthTarget),this.refractionTarget=new i(t,r),this.depthTarget=new i(t,r)))},f.prototype.process=function(e,t,r,o,i){if(this.waterEntity){this.updateSize(e),t=t.filter(function(e){return e.meshRendererComponent.isReflectable});var a=this.waterPlane;this.waterCamera.copy(o),this.updateWaterPlaneFromEntity&&(a.constant=this.waterEntity.transformComponent.worldTransform.translation.y);var n=o.translation.y>a.constant;if(this.waterEntity.skip=!0,n){this.useRefraction&&(r.process(this.waterCamera,t,this.renderList),this.clipPlane.setDirect(a.normal.x,-a.normal.y,a.normal.z,-a.constant),this.waterCamera.setToObliqueMatrix(this.clipPlane),this.depthMaterial.uniforms.waterHeight=a.constant,e.render(this.renderList,this.waterCamera,i,this.depthTarget,!0,this.depthMaterial),e.render(this.renderList,this.waterCamera,i,this.refractionTarget,!0),this.waterMaterial.setTexture("REFRACTION_MAP",this.refractionTarget),this.waterMaterial.setTexture("DEPTH_MAP",this.depthTarget));var s=this.calcVect,l=this.camReflectDir,c=this.camReflectUp,m=this.camReflectLeft,h=this.camLocation,f=this.camReflectPos;h.set(o.translation);var d=2*a.pseudoDistance(h);if(s.set(a.normal).mulDirect(d,d,d),f.set(h.sub(s)),h.set(o.translation).add(o._direction),d=2*a.pseudoDistance(h),s.set(a.normal).mulDirect(d,d,d),l.set(h.sub(s)).sub(f).normalize(),h.set(o.translation).add(o._up),d=2*a.pseudoDistance(h),s.set(a.normal).mulDirect(d,d,d),c.set(h.sub(s)).sub(f).normalize(),m.set(c).cross(l).normalize(),this.waterCamera.translation.set(f),this.waterCamera._direction.set(l),this.waterCamera._up.set(c),this.waterCamera._left.set(m),this.waterCamera.normalize(),this.waterCamera.update(),this.skybox&&this.followCam){var u=this.skybox.transformComponent.worldTransform;u.translation.set(f),u.update()}}if(this.waterMaterial.shader.uniforms.abovewater=n,r.process(this.waterCamera,t,this.renderList),e.setRenderTarget(this.reflectionTarget),e.clear(),this.skybox)if(this.skybox instanceof Array){this.clipPlane.setDirect(a.normal.x,a.normal.y,a.normal.z,a.constant),this.waterCamera.setToObliqueMatrix(this.clipPlane,10);for(var v=0;v<this.skybox.length;v++)e.render(this.skybox[v],this.waterCamera,i,this.reflectionTarget,!1),this.skybox[v].skip=!0}else e.render(this.skybox,this.waterCamera,i,this.reflectionTarget,!1),this.skybox.skip=!0;if(this.clipPlane.setDirect(a.normal.x,a.normal.y,a.normal.z,a.constant),this.waterCamera.setToObliqueMatrix(this.clipPlane),e.render(this.renderList,this.waterCamera,i,this.reflectionTarget,!1),this.waterEntity.skip=!1,this.skybox)if(this.skybox instanceof Array)for(var v=0;v<this.skybox.length;v++)this.skybox[v].skip=!1;else this.skybox.skip=!1;if(this.waterMaterial.setTexture("REFLECTION_MAP",this.reflectionTarget),n&&this.skybox&&this.followCam){var p=o.translation,u=this.skybox.transformComponent.worldTransform;u.translation.set(p).add(this.offset),u.update(),this.waterCamera._updatePMatrix=!0}}},f.prototype.setSkyBox=function(e){this.skybox=e,e.meshRendererComponent&&(this.skybox.meshRendererComponent.materials[0].depthState.enabled=!1,this.skybox.meshRendererComponent.materials[0].renderQueue=0,this.skybox.meshRendererComponent.cullMode="Never")},f.prototype.setWaterEntity=function(e){this.waterEntity=e,this.waterEntity.meshRendererComponent.materials[0]=this.waterMaterial};var d={defines:{REFRACTION:!1},attributes:{vertexPosition:e.POSITION,vertexNormal:e.NORMAL},uniforms:{viewMatrix:t.VIEW_MATRIX,projectionMatrix:t.PROJECTION_MATRIX,worldMatrix:t.WORLD_MATRIX,normalMatrix:t.NORMAL_MATRIX,cameraPosition:t.CAMERA,normalMap:"NORMAL_MAP",reflection:"REFLECTION_MAP",refraction:"REFRACTION_MAP",depthmap:"DEPTH_MAP",vertexTangent:[1,0,0,1],waterColor:[.0625,.0625,.0625],abovewater:!0,fogColor:[1,1,1],sunDirection:[.66,.66,.33],sunColor:[1,1,.5],sunShininess:100,sunSpecPower:4,fogStart:0,fogScale:2e3,timeMultiplier:1,time:t.TIME,distortionMultiplier:.025,fresnelPow:2,normalMultiplier:3,fresnelMultiplier:1,waterScale:5,doFog:!0,resolution:t.RESOLUTION},vshader:["attribute vec3 vertexPosition;","attribute vec3 vertexNormal;","uniform vec4 vertexTangent;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform float waterScale;","varying vec2 texCoord0;","varying vec3 eyeVec;","varying vec4 viewCoords;","varying vec3 worldPos;","void main(void) {","worldPos = (worldMatrix * vec4(vertexPosition, 1.0)).xyz;","texCoord0 = worldPos.xz * waterScale;","vec3 n = normalize(normalMatrix * vec3(vertexNormal.x, vertexNormal.y, -vertexNormal.z));","vec3 t = normalize(normalMatrix * vertexTangent.xyz);","vec3 b = cross(n, t) * vertexTangent.w;","mat3 rotMat = mat3(t, b, n);","vec3 eyeDir = worldPos - cameraPosition;","eyeVec = eyeDir * rotMat;","viewCoords = projectionMatrix * viewMatrix * worldMatrix * vec4(vertexPosition, 1.0);","gl_Position = viewCoords;","}"].join("\n"),fshader:["uniform sampler2D normalMap;","uniform sampler2D reflection;","#ifdef REFRACTION","uniform sampler2D refraction;","uniform sampler2D depthmap;","#endif","uniform vec3 waterColor;","uniform bool abovewater;","uniform vec3 fogColor;","uniform float fogStart;","uniform float fogScale;","uniform float time;","uniform float timeMultiplier;","uniform float distortionMultiplier;","uniform float fresnelPow;","uniform vec3 sunDirection;","uniform vec3 sunColor;","uniform float sunShininess;","uniform float sunSpecPower;","uniform float normalMultiplier;","uniform float fresnelMultiplier;","uniform bool doFog;","uniform vec2 resolution;","varying vec2 texCoord0;","varying vec3 eyeVec;","varying vec4 viewCoords;","varying vec3 worldPos;","vec4 combineTurbulence(in vec2 coords) {","float t = time * timeMultiplier;","vec4 coarse1 = texture2D(normalMap, coords * vec2(0.0012, 0.001) + vec2(0.019 * t, 0.021 * t));","vec4 coarse2 = texture2D(normalMap, coords * vec2(0.001, 0.0011) + vec2(-0.017 * t, 0.016 * t));","vec4 detail1 = texture2D(normalMap, coords * vec2(0.008) + vec2(0.06 * t, 0.03 * t));","vec4 detail2 = texture2D(normalMap, coords * vec2(0.006) + vec2(0.05 * t, -0.04 * t));","return (detail1 * 0.25 + detail2 * 0.25 + coarse1 * 0.75 + coarse2 * 1.0) / 2.25 - 0.48;","}","#ifdef REFRACTION",h.methods.unpackDepth,"#endif","void main(void) {","float fogDist = clamp((viewCoords.z-fogStart)/fogScale,0.0,1.0);","vec2 normCoords = texCoord0;","vec4 noise = combineTurbulence(normCoords);","vec3 normalVector = normalize(noise.xyz * vec3(normalMultiplier, normalMultiplier, 1.0));","vec3 localView = normalize(eyeVec);","float fresnel = dot(normalize(normalVector * vec3(fresnelMultiplier, fresnelMultiplier, 1.0)), localView);","if ( abovewater == false ) {","	fresnel = -fresnel;","}","fresnel *= 1.0 - fogDist;","float fresnelTerm = 1.0 - fresnel;","fresnelTerm = pow(fresnelTerm, fresnelPow);","fresnelTerm = clamp(fresnelTerm, 0.0, 1.0);","fresnelTerm = fresnelTerm * 0.95 + 0.05;","vec2 projCoord = viewCoords.xy / viewCoords.q;","projCoord = (projCoord + 1.0) * 0.5;","projCoord.y -= 1.0 / resolution.y;","#ifdef REFRACTION","float depth = unpackDepth(texture2D(depthmap, projCoord));","vec2 projCoordRefr = projCoord;","projCoordRefr += (normalVector.xy * distortionMultiplier) * smoothstep(0.0, 0.5, depth);","projCoordRefr = clamp(projCoordRefr, 0.001, 0.999);","depth = unpackDepth(texture2D(depthmap, projCoordRefr));","#endif","projCoord += (normalVector.xy * distortionMultiplier);","projCoord = clamp(projCoord, 0.001, 0.999);","if ( abovewater == true ) {","projCoord.x = 1.0 - projCoord.x;","}","vec4 waterColorX = vec4(waterColor, 1.0);","vec4 reflectionColor = texture2D(reflection, projCoord);","if ( abovewater == false ) {","reflectionColor *= vec4(0.8,0.9,1.0,1.0);","vec4 endColor = mix(reflectionColor,waterColorX,fresnelTerm);","gl_FragColor = mix(endColor,waterColorX,fogDist);","}","else {","vec3 sunSpecReflection = normalize(reflect(-sunDirection, normalVector));","float sunSpecDirection = max(0.0, dot(localView, sunSpecReflection));","vec3 specular = pow(sunSpecDirection, sunShininess) * sunSpecPower * sunColor;","vec4 endColor = waterColorX;","#ifdef REFRACTION","vec4 refractionColor = texture2D(refraction, projCoordRefr) * vec4(0.7);","endColor = mix(refractionColor, waterColorX, depth);","#endif","endColor = mix(endColor, reflectionColor, fresnelTerm);","if (doFog) {","gl_FragColor = (vec4(specular, 1.0) + mix(endColor,reflectionColor,fogDist)) * (1.0-fogDist) + vec4(fogColor, 1.0) * fogDist;","} else {","gl_FragColor = vec4(specular, 1.0) + mix(endColor,reflectionColor,fogDist);","}","}","}"].join("\n")},u={processors:[m.animation.processor],defines:{WEIGHTS:!0,JOINTIDS:!0},attributes:{vertexPosition:e.POSITION,vertexJointIDs:e.JOINTIDS,vertexWeights:e.WEIGHTS},uniforms:{viewMatrix:t.VIEW_MATRIX,projectionMatrix:t.PROJECTION_MATRIX,worldMatrix:t.WORLD_MATRIX,waterHeight:0,waterDensity:.05},vshader:["attribute vec3 vertexPosition;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec4 worldPosition;",m.animation.prevertex,"void main(void) {","mat4 wMatrix = worldMatrix;",m.animation.vertex,"worldPosition = wMatrix * vec4(vertexPosition, 1.0);","gl_Position = projectionMatrix * viewMatrix * worldPosition;","}"].join("\n"),fshader:["uniform float waterHeight;","uniform float waterDensity;",h.methods.packDepth,"varying vec4 worldPosition;","void main(void)","{","float linearDepth = clamp(pow((waterHeight - worldPosition.y) * waterDensity, 0.25), 0.0, 0.999);","gl_FragColor = packDepth(linearDepth);","}"].join("\n")};return f}(goo.MeshData,goo.Shader,goo.Camera,goo.Plane,goo.RenderTarget,goo.Vector3,goo.Vector4,goo.Material,goo.Texture,goo.TextureCreator,goo.ShaderBuilder,goo.ShaderFragment),goo.ProjectedGrid=function(e,t,r,o,i,a,n){"use strict";function s(n,s){this.densityX=void 0!==n?n:20,this.densityY=void 0!==s?s:20,this.projectorCamera=new a(45,1,.1,2e3),this.mainCamera=new a(45,1,.1,2e3),this.freezeProjector=!1,this.upperBound=20,this.origin=new o,this.direction=new o,this.source=new t,this.rangeMatrix=new i,this.intersectBottomLeft=new o,this.intersectTopLeft=new o,this.intersectTopRight=new o,this.intersectBottomRight=new o,this.planeIntersection=new r,this.freezeProjector=!1,this.projectorMinHeight=50,this.intersections=[];for(var l=0;24>l;l++)this.intersections.push(new r);this.connections=[0,3,1,2,0,4,1,5,2,6,3,7,4,7,5,6];var c=this.densityX*this.densityY,m=(this.densityX-1)*(this.densityY-1)*6,h=e.defaultMap([e.POSITION,e.TEXCOORD0]);e.call(this,h,c,m),this.rebuild()}return s.prototype=Object.create(e.prototype),s.prototype.constructor=s,s.prototype.update=function(e){if(0!==e.translation.y){var t=this.upperBound,i=this.mainCamera;if(i){this.freezeProjector||i.copy(e);var a=i.translation;a.y>0&&a.y<t+i.near?i.translation.setDirect(a.x,t+i.near,a.z):a.y<0&&a.y>-t-i.near&&i.translation.setDirect(a.x,-t-i.near,a.z);for(var s=i.calculateFrustumCorners(),l=0,c=new r,m=0;8>m;m++){var h=this.connections[2*m],f=this.connections[2*m+1];(s[h].y>t&&s[f].y<t||s[h].y<t&&s[f].y>t)&&this.getWorldIntersectionSimple(t,s[h],s[f],this.intersections[l++],c),(s[h].y>-t&&s[f].y<-t||s[h].y<-t&&s[f].y>-t)&&this.getWorldIntersectionSimple(-t,s[h],s[f],this.intersections[l++],c)}for(var m=0;8>m;m++)s[m].y<t&&s[m].y>-t&&this.intersections[l++].set(s[m]);if(0===l)return!1;var d=this.projectorCamera;if(d.copy(i),d.translation.y>0&&d._direction.y>0||d.translation.y<0&&d._direction.y<0){d._direction.y=-d._direction.y;var u=new r;u.set(d._direction).cross(d._left).normalize(),d._up.set(u)}var h=this.source,v=this.planeIntersection;h.setDirect(.5,.5),this.getWorldIntersection(0,h,d.getViewProjectionInverseMatrix(),v);var p=d.translation;if(p.y>0&&p.y<2*this.projectorMinHeight){var w=(2*this.projectorMinHeight-p.y)/(2*this.projectorMinHeight);d.translation.setDirect(p.x,2*this.projectorMinHeight-this.projectorMinHeight*w,p.z)}else if(p.y<0&&p.y>2*-this.projectorMinHeight){var w=(2*-this.projectorMinHeight-p.y)/(2*-this.projectorMinHeight);d.translation.setDirect(p.x,2*-this.projectorMinHeight+this.projectorMinHeight*w,p.z)}v.sub(d.translation),v.y=0;var g=v.length();g>Math.abs(d.translation.y)?(v.normalize(),v.scale(Math.abs(d.translation.y))):g<n.EPSILON&&(v.add(d._up),v.y=0,v.normalize(),v.scale(.1)),v.add(d.translation),v.y=0,d.lookAt(v,r.UNIT_Y);for(var x=d.getViewProjectionMatrix(),y=new o,C=this.intersections,m=0;l>m;m++){var M=C[m];y.setDirect(M.x,0,M.z,1),y.applyPost(x),M.setDirect(y.x,y.y,0),M.scale(1/y.w)}for(var T=Number.MAX_VALUE,R=-Number.MAX_VALUE,P=Number.MAX_VALUE,D=-Number.MAX_VALUE,m=0;l>m;m++)C[m].x<T&&(T=C[m].x),C[m].x>R&&(R=C[m].x),C[m].y<P&&(P=C[m].y),C[m].y>D&&(D=C[m].y);var b=this.rangeMatrix;b.setIdentity(),b.e00=R-T,b.e11=D-P,b.e03=T,b.e13=P;var j=d.getViewProjectionInverseMatrix();return b.mul2(j,b),h.setDirect(.5,.5),this.getWorldIntersectionHomogenous(0,h,b,this.intersectBottomLeft),h.setDirect(.5,1),this.getWorldIntersectionHomogenous(0,h,b,this.intersectTopLeft),h.setDirect(1,1),this.getWorldIntersectionHomogenous(0,h,b,this.intersectTopRight),h.setDirect(1,.5),this.getWorldIntersectionHomogenous(0,h,b,this.intersectBottomRight),!0}}},s.prototype.getWorldIntersectionHomogenous=function(e,t,r,o){this.calculateIntersection(e,t,r),o.set(this.origin)},s.prototype.getWorldIntersection=function(e,t,r,o){this.calculateIntersection(e,t,r),o.setDirect(this.origin.x,this.origin.y,this.origin.z).scale(1/this.origin.w)},s.prototype.getWorldIntersectionSimple=function(e,t,r,o,i){var a=o.set(t),n=i.set(r).sub(a),s=(e-a.y)/n.y;return n.scale(s),a.add(n),s>=0&&1>=s},s.prototype.calculateIntersection=function(e,t,r){if(this.origin.setDirect(2*t.x-1,2*t.y-1,-1,1),this.direction.setDirect(2*t.x-1,2*t.y-1,1,1),this.origin.applyPost(r),this.direction.applyPost(r),this.direction.sub(this.origin),Math.abs(this.direction.y)>n.EPSILON){var o=(e-this.origin.y)/this.direction.y;this.direction.scale(o)}else this.direction.normalize(),this.direction.scale(this.mainCamera._frustumFar);this.origin.add(this.direction)},s.prototype.rebuild=function(){for(var t=this.getAttributeBuffer(e.POSITION),r=this.getAttributeBuffer(e.TEXCOORD0),o=this.getIndexBuffer(),i=this.densityX,a=this.densityY,n=0;i>n;n++)for(var s=0;a>s;s++)t[3*(n+s*i)+0]=n,t[3*(n+s*i)+1]=0,t[3*(n+s*i)+2]=s,r[2*(n+s*i)+0]=n/(i-1),r[2*(n+s*i)+1]=s/(a-1);for(var l=0,c=0;i*(a-1)>c;c++)(c%(i*(Math.floor(c/i)+1)-1)!==0||0===c)&&(o[l++]=c,o[l++]=1+i+c,o[l++]=1+c,o[l++]=c,o[l++]=i+c,o[l++]=1+i+c);return this},s}(goo.MeshData,goo.Vector2,goo.Vector3,goo.Vector4,goo.Matrix4,goo.Camera,goo.MathUtils),goo.ProjectedGridWaterRenderer=function(e,t,r,o,i,a,n,s,l,c,m,h,f){"use strict";function d(t){this.waterCamera=new r(45,1,.1,2e3),this.renderList=[],this.waterPlane=new o,t=t||{};var f=window.innerWidth/(t.divider||4),d=window.innerHeight/(t.divider||4);this.renderTarget=new i(f,d),f=window.innerWidth/(t.divider||1),d=window.innerHeight/(t.divider||1),this.heightTarget=new i(f,d,{type:"Float"}),this.normalTarget=new i(f,d,{}),this.fullscreenPass=new a(h.normalmap),this.fullscreenPass.material.shader.uniforms.resolution=[f,d];var p=this.waterMaterial=new l(u,"WaterMaterial");p.cullState.enabled=!1;var w=null;if(t.normalsTexture)w=t.normalsTexture;else if(t.normalsUrl){var g=t.normalsUrl||"../resources/water/waternormals3.png";(new m).loadTexture2D(g).then(function(e){p.setTexture("NORMAL_MAP",e)})}else{var x=new Uint8Array([127,127,255,255]);w=new c(x,null,1,1),p.setTexture("NORMAL_MAP",w)}p.setTexture("REFLECTION_MAP",this.renderTarget),p.setTexture("BUMP_MAP",this.heightTarget),p.setTexture("NORMAL_MAP_COARSE",this.normalTarget),this.calcVect=new n,this.camReflectDir=new n,this.camReflectUp=new n,this.camReflectLeft=new n,this.camLocation=new n,this.camReflectPos=new n,this.waterEntity=null,this.clipPlane=new s;var y=this.projData=new e(e.defaultMap([e.POSITION]),4,6);y.getAttributeBuffer(e.POSITION).set([0,0,0,1,0,0,1,1,0,0,1,0]),y.getIndexBuffer().set([1,3,0,2,3,1]);var C=new l(v,"mat");this.projRenderable={meshData:y,materials:[C]}}d.prototype.updateHelper=function(t,r,o,i){var a=this.projData.getAttributeBuffer(e.POSITION);a[0]=t.x/t.w,a[1]=0,a[2]=t.z/t.w,a[3]=r.x/r.w,a[4]=0,a[5]=r.z/r.w,a[6]=o.x/o.w,a[7]=0,a[8]=o.z/o.w,a[9]=i.x/i.w,a[10]=0,a[11]=i.z/i.w,this.projData.setVertexDataUpdated()},d.prototype.process=function(e,t,r,o,i){if(this.waterEntity){t=t.filter(function(e){return e.meshRendererComponent.isReflectable});var a=this.waterEntity.meshDataComponent.meshData;a.update(o),this.waterMaterial.shader.uniforms.intersectBottomLeft=[a.intersectBottomLeft.x,a.intersectBottomLeft.y,a.intersectBottomLeft.z,a.intersectBottomLeft.w],this.waterMaterial.shader.uniforms.intersectBottomRight=[a.intersectBottomRight.x,a.intersectBottomRight.y,a.intersectBottomRight.z,a.intersectBottomRight.w],this.waterMaterial.shader.uniforms.intersectTopLeft=[a.intersectTopLeft.x,a.intersectTopLeft.y,a.intersectTopLeft.z,a.intersectTopLeft.w],this.waterMaterial.shader.uniforms.intersectTopRight=[a.intersectTopRight.x,a.intersectTopRight.y,a.intersectTopRight.z,a.intersectTopRight.w],this.updateHelper(a.intersectBottomLeft,a.intersectBottomRight,a.intersectTopRight,a.intersectTopLeft),e.render(this.projRenderable,o,i,this.heightTarget,!0),this.fullscreenPass.render(e,this.normalTarget,this.heightTarget,0);var n=this.waterPlane;this.waterCamera.copy(o),n.constant=this.waterEntity.transformComponent.transform.translation.y;var s=o.translation.y>n.constant;if(s){var l=this.calcVect,c=this.camReflectDir,m=this.camReflectUp,h=this.camReflectLeft,f=this.camLocation,d=this.camReflectPos;f.set(o.translation);var u=n.pseudoDistance(f);if(l.set(n.normal).scale(2*u),d.set(f.sub(l)),f.set(o.translation).add(o._direction),u=n.pseudoDistance(f),l.set(n.normal).scale(2*u),c.set(f.sub(l)).sub(d).normalize(),f.set(o.translation).add(o._up),u=n.pseudoDistance(f),l.set(n.normal).scale(2*u),m.set(f.sub(l)).sub(d).normalize(),h.set(m).cross(c).normalize(),this.waterCamera.translation.set(d),this.waterCamera._direction.set(c),this.waterCamera._up.set(m),this.waterCamera._left.set(h),this.waterCamera.normalize(),this.waterCamera.update(),this.skybox){var v=this.skybox.transformComponent.worldTransform;v.translation.set(d),v.update()}}if(this.waterMaterial.shader.uniforms.abovewater=s,this.waterEntity.skip=!0,this.renderList.length=0,r.process(this.waterCamera,t,this.renderList),this.clipPlane.setDirect(n.normal.x,n.normal.y,n.normal.z,n.constant),this.waterCamera.setToObliqueMatrix(this.clipPlane),e.render(this.renderList,this.waterCamera,i,this.renderTarget,!0),this.waterEntity.skip=!1,s&&this.skybox){var p=o.translation,v=this.skybox.transformComponent.worldTransform;v.translation.set(p),v.update()}}},d.prototype.setSkyBox=function(e){this.skybox=e},d.prototype.setWaterEntity=function(e){this.waterEntity=e,this.waterEntity.meshRendererComponent.cullMode="Never",this.waterEntity.meshRendererComponent.materials[0]=this.waterMaterial;var t=this.waterEntity.meshDataComponent.meshData;this.waterMaterial.shader.uniforms.density=[t.densityX,t.densityY]};var u={attributes:{vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:t.VIEW_MATRIX,projectionMatrix:t.PROJECTION_MATRIX,worldMatrix:t.WORLD_MATRIX,normalMatrix:t.NORMAL_MATRIX,cameraPosition:t.CAMERA,normalMap:"NORMAL_MAP",reflection:"REFLECTION_MAP",bump:"BUMP_MAP",normalMapCoarse:"NORMAL_MAP_COARSE",vertexNormal:[0,-1,0],vertexTangent:[1,0,0,1],waterColor:[15,15,15],abovewater:!0,fogColor:[1,1,1,1],sunDirection:[.66,-.1,.66],coarseStrength:.25,detailStrength:2,fogStart:0,camNear:t.NEAR_PLANE,camFar:t.FAR_PLANE,time:t.TIME,intersectBottomLeft:[0,0,0,0],intersectTopLeft:[0,0,0,0],intersectTopRight:[0,0,0,0],intersectBottomRight:[0,0,0,0],grid:!1,heightMultiplier:50,density:[1,1]},vshader:["attribute vec2 vertexUV0;","uniform vec3 vertexNormal;","uniform vec4 vertexTangent;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform float time;","uniform vec3 sunDirection;","uniform float coarseStrength;","uniform float heightMultiplier;","uniform sampler2D bump;","uniform vec4 intersectBottomLeft;","uniform vec4 intersectTopLeft;","uniform vec4 intersectTopRight;","uniform vec4 intersectBottomRight;","varying vec2 texCoord0;","varying vec2 texCoord1;","varying vec3 eyeVec;","varying vec3 sunDir;","varying vec4 viewCoords;","varying vec3 worldPos;","varying vec3 normal;","void main(void) {","	vec4 pointTop = mix(intersectTopLeft, intersectTopRight, vertexUV0.x);","	vec4 pointBottom = mix(intersectBottomLeft, intersectBottomRight, vertexUV0.x);","	vec4 pointFinal = mix(pointTop, pointBottom, 1.0 - vertexUV0.y);","	pointFinal.xz /= pointFinal.w;","	pointFinal.y = 0.0;","	vec4 screenpos = projectionMatrix * viewMatrix * worldMatrix * vec4(pointFinal.xyz, 1.0);","	vec2 projCoord = screenpos.xy / screenpos.q;","	projCoord = (projCoord + 1.0) * 0.5;","	float height = texture2D(bump, projCoord).x;","	pointFinal.y = height * heightMultiplier;","	texCoord1 = vertexUV0;","	vec4 pos = worldMatrix * vec4(pointFinal.xyz, 1.0);","	worldPos = pos.xyz;","	texCoord0 = worldPos.xz * 2.0;","	vec3 n = normalize(normalMatrix * vertexNormal);","	vec3 t = normalize(normalMatrix * vertexTangent.xyz);","	vec3 b = cross(n, t) * vertexTangent.w;","	mat3 rotMat = mat3(t, b, n);","	vec3 eyeDir = worldPos - cameraPosition;","	eyeVec = eyeDir * rotMat;","	sunDir = sunDirection * rotMat;","	viewCoords = projectionMatrix * viewMatrix * pos;","	gl_Position = viewCoords;","}"].join("\n"),fshader:["uniform sampler2D normalMap;","uniform sampler2D reflection;","uniform sampler2D normalMapCoarse;","uniform vec3 waterColor;","uniform bool abovewater;","uniform vec4 fogColor;","uniform float time;","uniform bool grid;","uniform vec2 density;","uniform float camNear;","uniform float camFar;","uniform float fogStart;","uniform float coarseStrength;","uniform float detailStrength;","varying vec2 texCoord0;","varying vec2 texCoord1;","varying vec3 eyeVec;","varying vec3 sunDir;","varying vec4 viewCoords;","varying vec3 worldPos;","varying vec3 normal;","const vec3 sunColor = vec3(1.0, 0.96, 0.96);","vec4 getNoise(vec2 uv) {","    vec2 uv0 = (uv/123.0)+vec2(time/17.0, time/29.0);","    vec2 uv1 = uv/127.0-vec2(time/-19.0, time/31.0);","    vec2 uv2 = uv/vec2(897.0, 983.0)+vec2(time/51.0, time/47.0);","    vec2 uv3 = uv/vec2(991.0, 877.0)-vec2(time/59.0, time/-63.0);","    vec4 noise = (texture2D(normalMap, uv0)) +","                 (texture2D(normalMap, uv1)) +","                 (texture2D(normalMap, uv2)*3.0) +","                 (texture2D(normalMap, uv3)*3.0);","    return noise/4.0-1.0;","}","void main(void)","{","	vec2 projCoord = viewCoords.xy / viewCoords.q;","	projCoord = (projCoord + 1.0) * 0.5;","	float fs = camFar * fogStart;","	float fogDist = clamp(max(viewCoords.z - fs, 0.0)/(camFar - camNear - fs), 0.0, 1.0);","	vec3 coarseNormal = texture2D(normalMapCoarse, projCoord).xyz * 2.0 - 1.0;","	vec2 normCoords = texCoord0;","	vec4 noise = getNoise(normCoords);","	vec3 normalVector = normalize(noise.xyz * vec3(1.8 * detailStrength, 1.8 * detailStrength, 1.0) + coarseNormal.xyz * vec3(1.8 * coarseStrength, 1.8 * coarseStrength, 1.0));","	vec3 localView = normalize(eyeVec);","	float fresnel = dot(normalize(normalVector*vec3(1.0, 1.0, 1.0)), localView);","	if ( abovewater == false ) {","		fresnel = -fresnel;","	}","	float fresnelTerm = 1.0 - fresnel;","	fresnelTerm *= fresnelTerm;","	fresnelTerm *= fresnelTerm;","	fresnelTerm = fresnelTerm * 0.95 + 0.05;","	if ( abovewater == true ) {","		projCoord.x = 1.0 - projCoord.x;","	}","	projCoord += (normalVector.xy * 0.05);","	projCoord = clamp(projCoord, 0.001, 0.999);"," vec4 waterColorX = vec4(waterColor / 255.0, 1.0);","	vec4 reflectionColor = texture2D(reflection, projCoord);","	if ( abovewater == false ) {","		reflectionColor *= vec4(0.8,0.9,1.0,1.0);","		vec4 endColor = mix(reflectionColor,waterColorX,fresnelTerm);","		gl_FragColor = mix(endColor,waterColorX,fogDist);","	}","	else {","		vec3 diffuse = vec3(0.0);","		vec3 specular = vec3(0.0);","		vec3 sunreflection = normalize(reflect(-sunDir, normalVector));","		float direction = max(0.0, dot(localView, sunreflection));","		specular += pow(direction, 100.0)*sunColor * 2.0;","		diffuse += max(dot(sunDir, normalVector),0.0)*sunColor*0.4;","		vec4 endColor = mix(waterColorX,reflectionColor,fresnelTerm);","		gl_FragColor = mix(vec4(diffuse*0.0 + specular, 1.0) + mix(endColor,reflectionColor,fogDist), fogColor, fogDist);","	}","	if (grid) {","		vec2 low = abs(fract(texCoord1*density)-0.5);","		float dist = 1.0 - step(min(low.x, low.y), 0.05);","		gl_FragColor *= vec4(dist);","	}","}"].join("\n")},v={attributes:{vertexPosition:e.POSITION},uniforms:{viewMatrix:t.VIEW_MATRIX,projectionMatrix:t.PROJECTION_MATRIX,worldMatrix:t.WORLD_MATRIX,time:t.TIME},vshader:["attribute vec3 vertexPosition;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec4 worldPos;","varying vec4 viewCoords;","void main(void) {","	worldPos = worldMatrix * vec4(vertexPosition, 1.0);","	viewCoords = viewMatrix * worldPos;","	gl_Position = projectionMatrix * viewMatrix * worldPos;","}"].join("\n"),fshader:["uniform float time;","varying vec4 worldPos;","varying vec4 viewCoords;",f.noise3d,"vec4 getNoise(sampler2D map, vec2 uv) {","    vec2 uv0 = (uv/223.0)+vec2(time/17.0, time/29.0);","    vec2 uv1 = uv/327.0-vec2(time/-19.0, time/31.0);","    vec2 uv2 = uv/vec2(697.0, 983.0)+vec2(time/151.0, time/147.0);","    vec2 uv3 = uv/vec2(791.0, 877.0)-vec2(time/259.0, time/263.0);","    vec4 noise = (texture2D(map, uv0)*0.0) +","                 (texture2D(map, uv1)*0.0) +","                 (texture2D(map, uv2)*0.0) +","                 (texture2D(map, uv3)*10.0);","    return noise/5.0-1.0;","}","void main(void)","{","	float fogDist = clamp(-viewCoords.z / 1000.0, 0.0, 1.0);","	gl_FragColor = vec4((snoise(vec3(worldPos.xz * 0.008, time * 0.4))+snoise(vec3(worldPos.xz * 0.02, time * 0.8))*0.5)/10.0);","}"].join("\n")};return d}(goo.MeshData,goo.Shader,goo.Camera,goo.Plane,goo.RenderTarget,goo.FullscreenPass,goo.Vector3,goo.Vector4,goo.Material,goo.Texture,goo.TextureCreator,goo.ShaderLib,goo.ShaderFragment),"function"==typeof require&&(define("goo/addons/waterpack/FlatWaterRenderer",[],function(){return goo.FlatWaterRenderer}),define("goo/addons/waterpack/ProjectedGrid",[],function(){return goo.ProjectedGrid}),define("goo/addons/waterpack/ProjectedGridWaterRenderer",[],function(){return goo.ProjectedGridWaterRenderer}));